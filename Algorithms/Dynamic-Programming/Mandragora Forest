/*
Either the pet will eat it or battle it. Eating any mandragora wont make a difference since eating each mandragora increments S by 1.
So, after eating x mandragoras, it will battle the remaining mandragoras such that the value of P=((x+1)*sum_of_remaining_mandragora_exp)
is maximum. Now consider each case, where in you go on eating mandragoras one by one with least exp. points first and calculate the 
value P in each case. This value will increase till a particular point. After this, the value of P will start to decrease. Once you 
reach this point, the maximum value of P is achieved and you need not check the rest of the cases.
*/

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

long int mandragora(vector<long int> v,int n,long int sum){
    sort(v.begin(),v.end());
    long int sum_rem=sum,profit=0,total=0;
    long int strength=1;
    for(int i=0;i<n;++i){
        sum_rem-=v[i];
        if((strength+1)*sum_rem>profit){
            strength+=1;
            profit=strength*sum_rem;
        }
        else{
            total+=strength*v[i];
        }
    }
    return total;
}

int main() {
    int t;
    cin>>t;
    for(int i=0;i<t;++i){
        int n;
        cin>>n;
        vector<long int> v(n);
        long int sum=0;
        for(int j=0;j<n;++j){
            cin>>v[j];
            sum+=v[j];
        }
        cout<<mandragora(v,n,sum)<<endl;
    }
    return 0;
}
