//O(nlongn) approach

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

//diff from original binary search as the key may or may not be present in the vector. therefore, return statement not included in v[mid]==key as key may not be present and thus continue to form infinite loop.
int ceilIndex(vector<int> &v,int low,int high,int key){
    while(high-low>1){
        int mid=low+(high-low)/2;
        if(v[mid]>=key)
            high=mid;
        else 
            low=mid;
    }
    return high;
}

long int lis(vector<int> &v){
    if(v.size()==0)
        return 0;
    long int len=v.size();
    vector<int> tail(len,0);
    tail[0]=v[0];
    int length=1;
    for(int i=1;i<len;++i){
        if(v[i]<tail[0])
            tail[0]=v[i];
        else if(v[i]>tail[length-1])
            tail[length++]=v[i];
        else{
            tail[ceilIndex(tail,-1,length-1,v[i])]=v[i];    //if low is taken as 0,infinite loop occurs. Check for an example.
        }
    }
    return length;
}

int main() {
    int n;
    cin>>n;
    vector<int> v;
    for(int i=0;i<n;++i){
        int x;
        cin>>x;
        v.push_back(x);
    }
    cout<<lis(v);
    return 0;
}
