//decimal to binary
/*
n = (N)?floor( log10(N)/log10(2) ) + 1:0; //calculate number of digits in advance floor(log2(N)) + 1
vector <int> bin(n);
i = n-1;
while(N!=0) {
    bin[i]=N%2;
    N/=2;
    i--;
}
*/

//binary to decimal
/*
string s = "1011";
n = s.length()
int N = 0;
while (n>0) {
    if (s[s.length()-n]=='1') N += pow(2,n-1);
    n--;
}
*/

#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

long int flipped(long int n){
    int len=32;
    //decimal to binary
    vector<int> bin(len);
    len--;
    while(n!=0){
        bin[len]=n%2;
        n/=2;
        len--;
    }
    //binary to decimal
    long int N=0;
    for(int i=31;i>=0;--i){
        if(!bin[i])
            N+=pow(2,31-i);
    }
    return N;
}

int main() {
    int t;
    cin>>t;
    for(int i=0;i<t;++i){
        long int n;
        cin>>n;
        cout<<flipped(n)<<endl;
    }
    return 0;
}
